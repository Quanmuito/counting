{"version":3,"sources":["utils/constants.ts","utils/helpers.ts","utils/convertEngine.ts","Keyboard.tsx","App.tsx","index.tsx"],"names":["BaseNumbers","SpecialChar","getThreeDigitsNbrAsStrArray","nbrAsStr","split","reverse","join","match","map","str","getUnit","index","capitalizeFirstLetter","charAt","toUpperCase","slice","addCommaToNumber","nbr","toString","parse1digit","parse2digit","char1","char2","includes","parse3digit","length","char3","parseNdigit","textArray","fullTextArray","i","push","Keyboard","input","setInput","handleClearInput","className","key","Fragment","type","onClick","inputAsString","newInputAsNumber","parseInt","handleEditInput","App","useState","useEffect","Number","MAX_SAFE_INTEGER","alert","result","convertEngine","htmlFor","autoComplete","name","id","value","onChange","event","inputStr","target","isNaN","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAaaA,EAA2B,CACpC,EAAK,OACL,EAAK,MACL,EAAK,MACL,EAAK,QACL,EAAK,OACL,EAAK,OACL,EAAK,MACL,EAAK,QACL,EAAK,QACL,EAAK,OACL,GAAM,OAGGC,EAA2B,CACpC,EAAK,OACL,EAAK,OACL,EAAK,MACL,EAAK,MACL,EAAK,OACL,GAAM,SACN,GAAM,UCjBGC,EAA8B,SAACC,GAAgC,IAAD,EAQvE,OAHiC,UAHFA,EAASC,MAAM,IAAIC,UAAUC,KAAK,IAGdC,MAAM,kBAAxB,QAAsC,CAAC,0BAG/CC,KAAI,SAACC,GAAD,OAAiBA,EAAIL,MAAM,IAAIC,UAAUC,KAAK,OAAKD,WAGvEK,EAAU,SAACC,GACpB,OAAQA,GACJ,KAAK,EAAG,MDvBQ,aCwBhB,KAAK,EAAG,MDvBO,YCwBf,KAAK,EAAG,MDvBO,YCwBf,KAAK,EAAG,MDvBQ,aCwBhB,KAAK,EAAG,MDvBW,gBCwBnB,QAAS,MAAO,KAIXC,EAAwB,SAACH,GAClC,OAAOA,EAAII,OAAO,GAAGC,cAAgBL,EAAIM,MAAM,IAGtCC,EAAmB,SAACC,GAC7B,OAAOf,EAA4Be,EAAIC,YAAYZ,KAAK,MChBtDa,EAAc,SAAChB,GACjB,OAAOH,EAAYG,IAGjBiB,EAAc,SAACjB,GACjB,MAAiCA,EAASC,MAAM,IAAhD,mBAAOiB,EAAP,KAAcC,EAAd,KAEA,MAAc,MAAVD,EAAsBF,EAAYG,GAExB,MAAVD,EACc,MAAVC,EAAsBH,EAAYhB,GAClC,CAAC,IAAK,KAAKoB,SAASD,GAAerB,EAAYE,IAE3C,CAAC,IAAK,IAAK,KAAKoB,SAASD,GAASrB,EAAYqB,GAASH,EAAYG,IFrC/D,QE0CR,CAAC,IAAK,IAAK,KAAKC,SAASF,GACnBF,EAAYE,GACZpB,EAAYoB,IF3CZ,ME+CK,MAAVC,EACK,IAAMH,EAAYG,GAClB,KAIZE,EAAc,SAACrB,GACjB,GAAwB,IAApBA,EAASsB,OAAc,OAAON,EAAYhB,GAC9C,GAAwB,IAApBA,EAASsB,OAAc,OAAOL,EAAYjB,GAE9C,MAAwCA,EAASC,MAAM,IAAvD,mBAAOiB,EAAP,KAAcC,EAAd,KAAqBI,EAArB,KAEA,OAAOP,EAAYE,GF1DA,aE6DA,MAAVC,GAA2B,MAAVI,EACZ,GACA,OAASN,EAAYE,EAAQI,KAIzCC,EAAc,SAACxB,GAKjB,IAJA,IACMyB,EADqC1B,EAA4BC,GAClBK,KAAI,SAACC,GAAD,OAAiBe,EAAYf,MAEhFoB,EAA0B,GACvBC,EAAI,EAAGA,EAAIF,EAAUH,OAAQK,IAC7BF,EAAUE,GAAGP,SAAS,SACvBM,EAAcE,KAAKH,EAAUE,GAAKpB,EAAQkB,EAAUH,OAASK,IAGrE,OAAOD,G,OClCIG,EA1CE,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAKjBC,EAAmB,WACrBD,EAAS,IAYb,OACI,qBAAKE,UAAU,WAAf,SACI,qBAAKA,UAAU,gBAAf,SAnBoB,CACxB,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,SAoB5B5B,KAAI,SAAC6B,GAAD,OACV,eAAC,IAAMC,SAAP,WACI,wBACIC,KAAK,SACLH,UAAS,wBAA6B,UAARC,EAAmB,sBAAwB,IACzEG,QAAmB,UAARH,EAAmBF,EAAmB,kBAlBrD,SAACE,GACrB,IAAMI,EAAwBR,EAAMf,WAE9BwB,EAA2BC,SADRF,EAAgBJ,GAGnCH,EADNQ,GAEeT,GAYgEW,CAAgBP,IAH3E,SAKMA,IAGF,CAAC,IAAK,IAAK,IAAK,aAAad,SAASc,GAAO,uBAAS,KATxCA,WC2C/BQ,MAhEf,WACI,MAA0BC,mBAAiB,GAA3C,mBAAOb,EAAP,KAAcC,EAAd,KAWAa,qBAAU,WACFd,EAAQe,OAAOC,mBACff,EAAS,GACTgB,MAAM,sBAAwBlC,EAAiBgC,OAAOC,sBAE3D,CAAChB,IAEJ,IAAMkB,EFhBmB,SAAClB,GAC1B,IAAM9B,EAAmB8B,EAAMf,WAG/B,OAAIe,EAAQ,GAAWd,EAAYhB,GAG/B8B,GAAS,IAAMA,EAAQ,IAAYb,EAAYjB,GAG/C8B,GAAS,KAAOA,EAAQ,IAAaT,EAAYrB,GAG9CwB,EAAYxB,GEGeiD,CAAcnB,GAEhD,OACI,sBAAKG,UAAU,MAAf,UACI,qBAAKA,UAAU,aAAf,SACI,6BAE2B,kBAAXe,EACFvC,EAAsBuC,GACtBA,EAAO3C,KAAI,SAACC,GAAD,OACT,eAAC,IAAM6B,SAAP,WACM1B,EAAsBH,GACxB,yBAFkBA,UAQ1C,sBAAK2B,UAAU,WAAf,UACI,uBACA,6BAAMpB,EAAiBiB,KACvB,uBACIG,UAAU,aACViB,QAAQ,aAFZ,4BAMA,uBACIC,aAAa,MACbC,KAAK,aACLC,GAAG,aACHjB,KAAK,OACLkB,MAAQxB,EACRyB,SAjDU,SAACC,GACvB,IAAMC,EAAmBD,EAAME,OAAOJ,MAChCxC,EAAc0B,SAASiB,GAE7BE,MAAM7C,GACAiB,EAAS,GACTA,EAASjB,IA4CHmB,UAAU,6BAEd,cAAC,EAAD,CACIH,MAAQA,EACRC,SAAWA,W,MC7D/B6B,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.33a54c1f.chunk.js","sourcesContent":["type NumbersType = {\r\n    [index: string]: string\r\n}\r\n\r\nexport const TEEN = 'teen';\r\nexport const TY = 'ty';\r\nexport const HUNDRED = ' hundred ';\r\nexport const THOUSAND = ' thousand ';\r\nexport const MILLION = ' million ';\r\nexport const BILLION = ' billion ';\r\nexport const TRILLION = ' trillion ';\r\nexport const QUADRILLION = ' quadrillion ';\r\n\r\nexport const BaseNumbers: NumbersType = {\r\n    '0': 'zero',\r\n    '1': 'one',\r\n    '2': 'two',\r\n    '3': 'three',\r\n    '4': 'four',\r\n    '5': 'five',\r\n    '6': 'six',\r\n    '7': 'seven',\r\n    '8': 'eight',\r\n    '9': 'nine',\r\n    '10': 'ten',\r\n};\r\n\r\nexport const SpecialChar: NumbersType = {\r\n    '2': 'twen',\r\n    '3': 'thir',\r\n    '4': 'for',\r\n    '5': 'fif',\r\n    '8': 'eigh',\r\n    '11': 'eleven',\r\n    '12': 'twelve',\r\n};\r\n","import {\r\n    THOUSAND,\r\n    MILLION,\r\n    BILLION,\r\n    TRILLION,\r\n    QUADRILLION\r\n} from './constants';\r\n\r\n/**\r\n * Example use:\r\n * Input: 12345678 (12,345,678)\r\n * -> '12345678'\r\n * -> '87654321'\r\n * -> ['876', '543', '21']\r\n * -> ['678', '345', '12']\r\n * -> ['12', '345', '678']\r\n */\r\nexport const getThreeDigitsNbrAsStrArray = (nbrAsStr: string): string[] => {\r\n    /** reversed the input number as string */\r\n    const reversedString: string = nbrAsStr.split('').reverse().join('');\r\n\r\n    /** Separate the string into an array of string, each element is a combination of 3 numbers */\r\n    const reversedStringArr: string[] = reversedString.match(/.{1,3}/g) ?? ['Something went wrong!'];\r\n\r\n    /** Reverse the order of numbers in each element of the array, reverse the array and return */\r\n    return reversedStringArr.map((str: string) => str.split('').reverse().join('')).reverse();\r\n};\r\n\r\nexport const getUnit = (index: number): string => {\r\n    switch (index) {\r\n        case 2: return THOUSAND;\r\n        case 3: return MILLION;\r\n        case 4: return BILLION;\r\n        case 5: return TRILLION;\r\n        case 6: return QUADRILLION;\r\n        default: return '';\r\n    }\r\n};\r\n\r\nexport const capitalizeFirstLetter = (str: string): string => {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\n\r\nexport const addCommaToNumber = (nbr: number): string => {\r\n    return getThreeDigitsNbrAsStrArray(nbr.toString()).join(',');\r\n};\r\n\r\n\r\n","import {\r\n    TEEN,\r\n    TY,\r\n    HUNDRED,\r\n    BaseNumbers,\r\n    SpecialChar\r\n} from './constants';\r\nimport {\r\n    getUnit,\r\n    getThreeDigitsNbrAsStrArray\r\n} from './helpers';\r\n\r\nexport const convertEngine = (input: number): string | string[] => {\r\n    const nbrAsStr: string = input.toString();\r\n\r\n    /** 1 digit */\r\n    if (input < 10) return parse1digit(nbrAsStr);\r\n\r\n    /** 2 digits */\r\n    if (input >= 10 && input < 100) return parse2digit(nbrAsStr);\r\n\r\n    /** 3 digits */\r\n    if (input >= 100 && input < 1000) return parse3digit(nbrAsStr);\r\n\r\n    /** 4 digits and above */\r\n    return parseNdigit(nbrAsStr);\r\n};\r\n\r\nconst parse1digit = (nbrAsStr: string): string => {\r\n    return BaseNumbers[nbrAsStr];\r\n};\r\n\r\nconst parse2digit = (nbrAsStr: string): string => {\r\n    const [char1, char2]: string[] = nbrAsStr.split('');\r\n\r\n    if (char1 === '0') return parse1digit(char2);\r\n\r\n    if (char1 === '1') {\r\n        if (char2 === '0') return parse1digit(nbrAsStr); // 10\r\n        if (['1', '2'].includes(char2)) return SpecialChar[nbrAsStr]; // 11 & 12\r\n\r\n        return (['3', '5', '8'].includes(char2) ? SpecialChar[char2] : parse1digit(char2)) + TEEN;\r\n    }\r\n\r\n    return ''\r\n        + (\r\n            ['6', '7', '9'].includes(char1)\r\n                ? parse1digit(char1)\r\n                : SpecialChar[char1]\r\n        )\r\n        + TY\r\n        + (\r\n            (char2 !== '0')\r\n                ? '-' + parse1digit(char2)\r\n                : ''\r\n        );\r\n};\r\n\r\nconst parse3digit = (nbrAsStr: string): string => {\r\n    if (nbrAsStr.length === 1) return parse1digit(nbrAsStr);\r\n    if (nbrAsStr.length === 2) return parse2digit(nbrAsStr);\r\n\r\n    const [char1, char2, char3]: string[] = nbrAsStr.split('');\r\n\r\n    return parse1digit(char1)\r\n        + HUNDRED\r\n        + (\r\n            (char2 === '0' && char3 === '0')\r\n                ? ''\r\n                : 'and ' + parse2digit(char2 + char3)\r\n        );\r\n};\r\n\r\nconst parseNdigit = (nbrAsStr: string): string[] => {\r\n    const threeDigitsNbrAsStrArray: string[] = getThreeDigitsNbrAsStrArray(nbrAsStr);\r\n    const textArray: string[] = threeDigitsNbrAsStrArray.map((str: string) => parse3digit(str));\r\n\r\n    const fullTextArray: string[] = [];\r\n    for (let i = 0; i < textArray.length; i++) {\r\n        if (!textArray[i].includes('zero')) {\r\n            fullTextArray.push(textArray[i] + getUnit(textArray.length - i));\r\n        }\r\n    }\r\n    return fullTextArray;\r\n};\r\n","import React from 'react';\r\n\r\ntype KeyboardProps = {\r\n    input: number\r\n    setInput: React.Dispatch<React.SetStateAction<number>>\r\n}\r\n\r\nconst Keyboard = ({ input, setInput }: KeyboardProps) => {\r\n    const keyLayout: string[] = [\r\n        '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Clear',\r\n    ];\r\n\r\n    const handleClearInput = (): void => {\r\n        setInput(0);\r\n    };\r\n\r\n    const handleEditInput = (key: string): void => {\r\n        const inputAsString: string = input.toString();\r\n        const newInput: string = inputAsString + key;\r\n        const newInputAsNumber: number = parseInt(newInput);\r\n        newInputAsNumber\r\n            ? setInput(newInputAsNumber)\r\n            : setInput(input);\r\n    };\r\n\r\n    return (\r\n        <div className=\"keyboard\">\r\n            <div className=\"keyboard_keys\">\r\n                {\r\n                    keyLayout.map((key: string) => (\r\n                        <React.Fragment key={ key }>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={ `keyboard__key ${(key === 'Clear') ? 'keyboard__key--wide' : ''}` }\r\n                                onClick={ (key === 'Clear') ? handleClearInput : () => handleEditInput(key) }\r\n                            >\r\n                                { key }\r\n                            </button>\r\n                            {\r\n                                ['3', '6', '9', 'backspace'].includes(key) ? <br /> : ''\r\n                            }\r\n                        </React.Fragment>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Keyboard;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { convertEngine } from './utils/convertEngine';\r\nimport {\r\n    capitalizeFirstLetter,\r\n    addCommaToNumber\r\n} from './utils/helpers';\r\n\r\nimport Keyboard from './Keyboard';\r\n\r\nfunction App() {\r\n    const [input, setInput] = useState<number>(0);\r\n\r\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const inputStr: string = event.target.value;\r\n        const nbr: number = parseInt(inputStr);\r\n\r\n        isNaN(nbr)\r\n            ? setInput(0)\r\n            : setInput(nbr);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (input > Number.MAX_SAFE_INTEGER) {\r\n            setInput(0);\r\n            alert('Maximum number is: ' + addCommaToNumber(Number.MAX_SAFE_INTEGER));\r\n        }\r\n    }, [input]);\r\n\r\n    const result: string | string[] = convertEngine(input);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"App-header\">\r\n                <h1>\r\n                    {\r\n                        (typeof result === 'string')\r\n                            ? capitalizeFirstLetter(result)\r\n                            : result.map((str: string) => (\r\n                                <React.Fragment key={ str }>\r\n                                    { capitalizeFirstLetter(str) }\r\n                                    <br />\r\n                                </React.Fragment>\r\n                            ))\r\n                    }\r\n                </h1>\r\n            </div>\r\n            <div className=\"App-body\">\r\n                <br />\r\n                <h1>{ addCommaToNumber(input) }</h1>\r\n                <label\r\n                    className=\"form-label\"\r\n                    htmlFor=\"text-input\"\r\n                >\r\n                    Input a number\r\n                </label>\r\n                <input\r\n                    autoComplete=\"off\"\r\n                    name=\"test-input\"\r\n                    id=\"test-input\"\r\n                    type=\"text\"\r\n                    value={ input }\r\n                    onChange={ handleInputChange }\r\n                    className=\"form-control text-center\"\r\n                />\r\n                <Keyboard\r\n                    input={ input }\r\n                    setInput={ setInput }\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}